https://code.visualstudio.com/ > install
https://nodejs.org/en/ (install)
https://github.com/(create account)
https://git-scm.com/downloads (install)
https://www.postman.com/ (install)

https://github.com/Aakashdeveloper (follow)
(add to chrome)
https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh

//Extensions
> TabNine
> vscode-icons
> git history
> git Lens
> Code Spell Checker

//Prerequest
Html
CSS
Basic JavaScript
(ifelse,function,loop,array,object,variable)

Npm
React = 3
Mock API> Dummy Api
json-server
React_hooks -1
React-GraphQL-1
HOC
loginapp
Github
Deployment
-> MERN
-> Netlify
-> Aws
-> Docker
-> Nginx
React-Redux =1
Basic React Native=1
Testing Jest Enzime
///////Walkthrough///////
React-Saga -1

--------NOT Backend--------------
API
> GraphQL
> Login/Logout
> Zomato


//////////////
Node Package managers
> 2,202,201

//
> Package.Json
# entry point to application package
# It contains all the packages required for the app
# It Contains Script
# It Contains metadata (name,version,description)

* JSON > JavaScript Object Notation
[
    {
        "name":"Kanika",
        "city":"Paris"
    },
    {
        "name":"Amit",
        "city":"Delhi"
    }
]

/////////////
> Step to generate package.json
* NodeJs must be installed in your laptop
* Go inside the folder using cmd / terminal
* npm init 
* answer all questions
* type "yes"

/////////////
> Step to install package
* NodeJs must be installed in your laptop
* Go inside the folder using cmd / terminal
* npm i packagename/npm install packagename


////////////////////////////////////////////////////////////////
>>Setup React App

# windows (one time in new laptop)
> open the cmd as administrator
> npm i -g create-react-app

# Next Everytime you need to generate the new app
> open cmd
> Go inside folder using cmd where you want new app
> create-react-app appname

----------------------

# mac (one time in new laptop)
> open the terminal
> sudo npm i -g create-react-app

# Next Everytime you need to generate the new app
> open terminal
> Go inside folder using cmd where you want new app
> create-react-app appname

**********************************
# Window/mac
> Go inside folder using cmd where you want new app
> npx create-react-app appname


////////////////////////////////////////////////////////////////
>> Step to run app
> Go inside app folder using cmd
> npm i
> npm start


React
> React is frontend lib which help
to create single page application
using component based structure


React > is the main library which provide all functionality
React-DOM > help to render the content
React-script > help to run or complie the app



// component
funtional component
> Dumb component
> Mainly use for display purpose
> Cannot Maintain state

class component
> Logical Component
> Use for logics as well as display
> We can maintain state


hooks component


////////////////////////////////////////
State
> Act like a local variable
> We can update the value of state
> Any data interaction will happen through state
> Whenever state update component will re-render

Props
> Help to transfer the data (between 2 nested component)
> We cannot update the value of props
////////////////////////////////////////////////////////////////
//es5 (Ecma Script)
function add(a,b){
    return a+b
}

//es6
let add = (a,b) => {return a+b}

function add(a,b){
    return a,b
}

add(4,9)
9



(get) cityname >           http://3.17.216.66:4000/location
(get) restwrtcity >        http://3.17.216.66:4000/restaurant?stateId=1
(get) quickSearch>         http://3.17.216.66:4000/quicksearch

(get) onbasisofMeal >      http://3.17.216.66:4000/restaurant?mealtype_id=
(get) cuisinefilter >      http://3.17.216.66:4000/filter/4?cuisine=1
(get) costfilter >         http://3.17.216.66:4000/filter/1?hcost=1000&lcost=500

(get) restdetails >        http://3.17.216.66:4000/details/1
(get) menu >               http://3.17.216.66:4000/menu/1

(post) orderspage >        http://3.17.216.66:4000/menuItem
                           body [1,4,5]
(post)placeOrder >        

(get) allorder>            
       
(get) restaurants>         http://3.17.216.66:4000/restaurants


var a = "hiii" 'hi' `hi`

> map is use to iterate over the Array
> it always return same length of output array as input array
> it is use for applying the logics (add,sub,mul, print in html)

var a = [4,7,6,34,23,41,14,56,12,23,67,49];
a.map((data) => {return data*2})
[8, 14, 12, 68, 46, 82, 28, 112, 24, 46, 134, 98]

> Filter is use to filter out the value
> it may or may not return the same length of output as input array
> Filter only return those data for which output or condition is true

var a = [4,7,6,34,23,41,14,56,12,23,67,49];
a.filter((data) => {return data>30})
[34, 41, 56, 67, 49]

a.map((data) => {return data>30})
[false, false, false, true, false, true, false, true, false, false, true, true]


var a = [0,1,2,3]
a.filter((data) => {return data*2})
[1,2,3]

a.map((data) => {return data*2})
[0,2,4,6]

var city = ['Delhi', 'Amsterdam', 'London', 'Venice', 'Boston', 'Helsinki']

city.indexOf('Innsburg')
-1
city.indexOf('Stockholm')
-1
city.indexOf('Delhi')
0
city.indexOf('Venice')
3


parent > child (props)
child > parent (props with function)

parent > wrt function
child > call function


//parent 
function add(a,b){
    return a+b
}


//child
add(1,2)


Params
> What we pass after / in url
> Need to define the routing
> If defined than need to pass
> Should be use for 1 or 2 values

queryParams
> What we pass after ? in url
> No Need to define
> Optional to pass
> Can be use for multiple values


//default props
History > Use for redirection
Location > For Query Params
Match > For Params

var a = "?page=1&city=Delhi"
undefined
a.split('&')
(2) ['?page=1', 'city=Delhi']0: "?page=1"1: "city=Delhi"length: 2[[Prototype]]: Array(0)
var out = a.split('&')
undefined
out
(2) ['?page=1', 'city=Delhi']
out[1].split('=')
(2) ['city', 'Delhi']
out[1].split('=')[1]
'Delhi'


//https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps

//es5
var a = 10
var b = "My age is "+a
"My age is 10"

//es6
var a = 10
var b = `My age is ${a}`
"My age is 10"

var a = [4,7,9,13,45,9]
undefined
a.splice(3,1)
[13]
a
(5) [4, 7, 9, 45, 9]
a.splice(a.indexOf(7),1)
[7]
a
(4) [4, 9, 45, 9]
a.splice(a.indexOf(9),1)
[9]
a
(3) [4, 45, 9]
a.splice(a.indexOf(9),1)
[9]
a
(2) [4, 45]
a.splice(a.indexOf(9),1)
[45]

///////////
#window
> open cmd as admin
> npm i -g json-server
> go inside the folder where file present
> json-server --watch orders.json --port 7899

#mac/linux
> open terminal
> sudo npm i -g json-server
> go inside the folder where file present
> json-server --watch orders.json --port 7899

https://www.codingame.com/playgrounds/8595/reactjs-higher-order-components-tutorial


a component that take component and data as a parameter and 
return compnent with data

/////////////
/******GetAllUser*****/
(GET)> http://3.17.216.66:5000/api/auth/users

/******Register*****/
(POST)> http://3.17.216.66:5000/api/auth/register
(body) => {"name":"Aakash", "email":"aa@gmail.com","password":"12345678","phone":343432,role?":"user"}

/******Login*****/
(POST) => http://3.17.216.66:5000/api/auth/login
(body)  => {"email":"aa@gmail.com","password":"12345678"}
(response)=> {auth:true,token:'dgsdg'}

/******UserInfo*****/
(GET) => http://3.17.216.66:5000/api/auth/userinfo
(Header) => {'x-access-token':'token value from login'}

//build
> npm run build

Docker build . -t imagename
docker run -p 8089:3000 imagename


Action
>> All Api Calling
>> type and payload
Reducer
>> Help mange State
>> switch case
Store
>> Take data from reducer
>> Accessable accross the app
Component
>> Responsible for calling Action
>> View the data


npx create-react-native-app mymobi


https://github.com/Aakashdeveloper/react-interview-questions




npm i @apollo/client
---------------------------------------------------------------

import {Apollo Client, InMemoryCache, ApolloProvider, HttpLink, from} from "@apollo/client"

const Link = from([new HttpLink({uri: "http://localhost.."})])

const client = new ApolloClient({
   cache: new InMemoryCache
   link: Link
})

<ApolloProvider client={client}>
      <showData/>
</ApolloProvider>
------------------------------------------------------------------------

import{useQuery, gql} from @apollo/client

const showData=()=>{
     const Query = gql `query{book(id:5){name}}`
}

const{error,loading,data}= useQuery(Query)
useEffect(()=> {
   console.log(error)
   console.log(data)
})
---------------------------------------------------------------------

This is the code of frontend dealing with GraghQL(shown by Harshad)
Hope this helps,though this may have some typo..


